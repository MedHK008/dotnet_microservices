name: Build, Test, Deploy to GKE

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT }}
  REGION: ${{ secrets.GCP_REGION }}
  CLUSTER_NAME: ${{ secrets.GKE_CLUSTER }}
  REPO_NAME: microservices-repo

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Set up .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      # 3. Restore dependencies and build
      - name: Restore and Build
        run: dotnet build dotnet_microservices.sln --configuration Release

      # 4. Run tests
      - name: Run tests
        run: dotnet test dotnet_microservices.sln --configuration Release --verbosity normal

      # 5. Authenticate to Google Cloud
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # 6. Set up gcloud CLI
      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2

      # 7. Authenticate Docker with Artifact Registry
      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      # 8. Build and push Docker images
      - name: Build and Push Docker Images
        run: |
          docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/frontend:${{ github.sha }} ./Frontend
          docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/authservice:${{ github.sha }} ./AuthService
          docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/catalogservice:${{ github.sha }} ./CatalogService

          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/frontend:${{ github.sha }}
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/authservice:${{ github.sha }}
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/catalogservice:${{ github.sha }}

      # 9. Connect to GKE
      - name: Get GKE credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ env.CLUSTER_NAME }}
          location: ${{ env.REGION }}

      # 10. Deploy to GKE
      - name: Deploy to GKE
        run: |
          # Create namespace if it doesn't exist
          kubectl apply -f k8s/namespace.yaml
          
          # Apply all Kubernetes manifests
          kubectl apply -f k8s/authservice-deployment.yaml
          kubectl apply -f k8s/catalogservice-deployment.yaml
          kubectl apply -f k8s/frontend-deployment.yaml
          kubectl apply -f k8s/ingress.yaml
          
          # Update the deployment images to the new version
          kubectl set image deployment/frontend frontend=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/frontend:${{ github.sha }} -n microservices
          kubectl set image deployment/authservice authservice=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/authservice:${{ github.sha }} -n microservices
          kubectl set image deployment/catalogservice catalogservice=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/catalogservice:${{ github.sha }} -n microservices
          
          # Wait for rollout to complete
          kubectl rollout status deployment/frontend -n microservices
          kubectl rollout status deployment/authservice -n microservices
          kubectl rollout status deployment/catalogservice -n microservices
          
          # Display deployment status
          kubectl get pods -n microservices
